<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Air Craft Landing
// See http://www.cs.aau.dk/~behrmann/cora/casestudies.html 

//Number of different types of aircrafts
const int TYPES = 2;

//Global time
clock time;

//Synchronization mechanism for landing the different types of aircrafts
chan land[TYPES];

//Turbulence constraints
const int wait[TYPES][TYPES] = {{3, 15}, {15, 8}};</declaration><template><name>Runway</name><declaration>//Clock for keeping track of the last time an aircraft of type i landed
clock  c[TYPES];</declaration><location id="id0" x="16" y="-112"><name x="8" y="-144">Init</name></location><location id="id1" x="16" y="16"></location><init ref="id0"/><transition><source ref="id0"/><target ref="id1"/><label kind="synchronisation" x="48" y="-80">land[0] ?</label><label kind="assignment" x="48" y="-56">c[0] = 0</label><nail x="48" y="-48"/></transition><transition><source ref="id0"/><target ref="id1"/><label kind="synchronisation" x="-72" y="-80">land[1] ?</label><label kind="assignment" x="-72" y="-56">c[1] = 0</label><nail x="-16" y="-48"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="104" y="-24">c[0]&gt;=wait[0][0] &amp;&amp;
c[1] &gt;= wait[1][0]</label><label kind="synchronisation" x="104" y="16">land[0] ?</label><label kind="assignment" x="104" y="40">c[0] = 0</label><nail x="96" y="-16"/><nail x="96" y="48"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-208" y="-24">c[0] &gt;=wait[0][1] &amp;&amp;
c[1] &gt;= wait[1][1]</label><label kind="synchronisation" x="-128" y="16">land[1] ?</label><label kind="assignment" x="-128" y="40">c[1] = 0</label><nail x="-64" y="-16"/><nail x="-64" y="48"/></transition></template><template><name>Flight</name><parameter>const int E, const int T, const int L, const int e, const int l, const int d, const int type</parameter><location id="id2" x="304" y="-144"><name x="320" y="-152">approaching</name><label kind="invariant" x="264" y="-176">time &lt;= T</label></location><location id="id3" x="400" y="-48"><name x="328" y="-56">delayed</name><label kind="invariant" x="424" y="-64">time &lt;= L &amp;&amp;
cost' == l</label></location><location id="id4" x="208" y="-48"><name x="224" y="-56">on_time</name><label kind="invariant" x="96" y="-64">time &lt;= T &amp;&amp; 
cost' == e</label></location><location id="id5" x="304" y="48"><name x="288" y="56">done</name></location><init ref="id2"/><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="336" y="-128">time == T</label></transition><transition><source ref="id4"/><target ref="id5"/><label kind="guard" x="176" y="-8">time == T</label></transition><transition><source ref="id3"/><target ref="id5"/><label kind="synchronisation" x="360" y="-8">land[type]!</label></transition><transition><source ref="id2"/><target ref="id4"/><label kind="guard" x="184" y="-136">time &gt;= E</label><label kind="synchronisation" x="176" y="-112">land[type] !</label></transition></template><system>runway0 = Runway();
runway1 = Runway();
//Parameter instantiating for flights (earliest, target, latest, early penalty, late penalty, late cost, type)
KL101 = Flight(129,153,559,10,10,0,0);
KL108 = Flight(195,258,744,10,10,0,0);
KL115 = Flight(89,98,510,30,30,0,1);
KL122 = Flight(96,196,521,30,30,0,1);
KL129 = Flight(110,123,555,30,30,0,1);
KL136 = Flight(120,135,576,30,30,0,1);
KL143 = Flight(124,138,577,30,30,0,1);
KL150 = Flight(126,140,573,30,30,0,1);
KL157 = Flight(135,150,591,30,30,0,1);
KL164 = Flight(160,180,657,30,30,0,1);

system runway0, runway1, KL101, KL108, KL115, KL122, KL129, KL136, KL143, KL150, KL157, KL164;</system></nta>